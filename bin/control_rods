#!/usr/bin/env escript

%% Only works on localhost, assumes the current hostname will fit the localhost
-define(NAME, filename:basename(escript:script_name())).

main(["deny_redis_buffers"]) ->
    Node = connect(),
    io:format("Preventing all writes to logplex_logs_redis nodes...~n"),
    Res = rpc:call(Node, logplex_app, set_config, [deny_redis_buffers, true]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["allow_redis_buffers"]) ->
    Node = connect(),
    io:format("Allowing writes to logplex_logs_redis nodes...~n"),
    Res = rpc:call(Node, logplex_app, set_config, [deny_redis_buffers, false]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["deny_tail_sessions"]) ->
    Node = connect(),
    io:format("Preventing creation of new tail sessions...~n"),
    Res = rpc:call(Node, logplex_app, set_config, [deny_tail_sessions, true]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["kill_tail_sessions"]) ->
    Node = connect(),
    io:format("Killing all tail sessions...~n"),
    Res = rpc:call(Node, logplex_tail, kill_all_sessions, []),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["allow_tail_sessions"]) ->
    Node = connect(),
    io:format("Allowing creation of new tail sessions...~n"),
    Res = rpc:call(Node, logplex_app, set_config, [deny_tail_sessions, false]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["deny_drain_forwarding"]) ->
    Node = connect(),
    io:format("Preventing all writes to drains...~n"),
    Res = rpc:call(Node, logplex_app, set_config, [deny_drain_forwarding, true]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["allow_drain_forwarding"]) ->
    Node = connect(),
    io:format("Allowing writes to drains...~n"),
    Res = rpc:call(Node, logplex_app, set_config, [deny_drain_forwarding, false]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["deny_logs_ingress"]) ->
    Node = connect(),
    io:format("Preventing ingress for all logs...~n"),
    Res = rpc:call(Node, logplex_app, set_config, [deny_logs_ingress, true]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["allow_logs_ingress"]) ->
    Node = connect(),
    io:format("Allowing logs ingress...~n"),
    Res = rpc:call(Node, logplex_app, set_config, [deny_logs_ingress, false]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["disable_firehose"]) ->
    Node = connect(),
    io:format("Disabling firehose...~n"),
    Res = rpc:call(Node, logplex_firehose, disable, []),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["enable_firehose"]) ->
    Node = connect(),
    io:format("Enabling firehose...~n"),
    Res = rpc:call(Node, logplex_firehose, enable, []),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["disable_api"]) ->
    Node = connect(),
    io:format("Disabling API (v2 & v3)...~n"),
    Res = rpc:call(Node, logplex_api, set_status, [disabled]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["enable_api"]) ->
    Node = connect(),
    io:format("Enabling API (v2 & v3)...~n"),
    Res = rpc:call(Node, logplex_api, set_status, [normal]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(["set_api_read_only"]) ->
    Node = connect(),
    io:format("Setting API (v2 & v3) in read-only mode...~n"),
    Res = rpc:call(Node, logplex_api, set_status, [read_only]),
    io:format("Node: ~p~n", [Res]),
    disconnect(),
    halt(0);
main(_) ->
    io:format("Control rods for local logplex node. These control rods can be modified on the fly while logplex is running.~n~n"
              "Usage: control_rods <rod>~n~n"
              "deny_redis_buffers\t\tPrevent all writes to logplex_logs_redis nodes.~n"
              "allow_redis_buffers\t\tAllow writes to logplex_logs_redis nodes.~n~n"
              "deny_tail_sessions\t\tPrevent creation of new tail sessions.~n"
              "kill_tail_sessions\t\tKill all tail sessions on this node.~n"
              "allow_tail_sessions\t\tAllow creation of new tail sessions.~n~n"
              "deny_drain_forward\t\tPrevent all writes to drains.~n"
              "allow_drain_forward\t\tAllow writes to drains.~n~n"
              "deny_logs_ress\t\t\tPrevent ingress for all logs.~n"
              "allow_logs_ress\t\t\tAllow logs ingress.~n~n"
              "disable_firehose\t\tDisable firehose.~n"
              "enable_firehose\t\t\tEnable firehose.~n~n"
              "disable_api\t\t\tDisable API (v2 & v3).~n"
              "enable_api\t\t\tEnable API (v2 & v3).~n"
              "set_api_read_only\t\tSet API (v2 & v3) in read-only mode.~n"
             ),
    halt(0).

connect() ->
    Node = list_to_atom("logplex@" ++ net_adm:localhost()),
    io:format("Starting distributed mode.~n"),
    {ok, _} = net_kernel:start([script_name(), longnames]),
    set_cookie(Node),
    io:format("Connecting (hidden) to ~p.~n", [Node]),
    true = net_kernel:hidden_connect(Node), % undocumented yay!
    io:format("Connected.~n"),
    Node.

disconnect() ->
    io:format("Disconnecting.~n"),
    net_kernel:stop().

script_name() ->
    list_to_atom(?NAME ++ "_"
                 ++ os:getpid()
                 ++ "@" ++ net_adm:localhost()).

set_cookie(Node) ->
    case os:getenv("LOGPLEX_COOKIE") of
        false ->
            io:format("LOGPLEX_COOKIE not found, proceeding without it.~n");
        Cookie ->
            erlang:set_cookie(Node, list_to_atom(Cookie))
    end.

