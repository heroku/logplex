#!/usr/bin/env escript
%% -*- erlang -*-
%%!

%%% - Replace the shards used by the [local] logplex
%%%   instace.

main([Env]) when Env =:= "-e";
                 Env =:= "--env" ->
    from_env();
main([Keys]) when Keys =:= "-k";
                  Keys =:= "--keys-file" ->
    from_keys();
main(_) ->
    usage().

%% Internal
usage() ->
    io:format("Usage: bin/replace_shards~n"),
    io:format("  bin/replace_shards -h/--help~n"),
    io:format("  bin/replace_shards -e/--env~n"),
    io:format("  bin/replace_shards -k/--keys-file~n").

from_env() ->
    LogplexShardUrls = getenv("LOGPLEX_SHARD_URLS"),
    Cookie = getenv("LOGPLEX_COOKIE"),
    update_shards(LogplexShardUrls, Cookie).

from_keys() ->
    LogplexShardUrls = get_from_keys("LOGPLEX_SHARD_URLS"),
    Cookie = get_from_keys("LOGPLEX_COOKIE"),
    update_shards(LogplexShardUrls, Cookie).

update_shards(LogplexShardUrls, Cookie) ->
    case connect(logplex_node(), cookie(Cookie)) of
        {error, Why} ->
            io:format("Could not connect to node ~p~n", [Why]),
            halt(1);
        {connected, Node} ->
            {OldShards, _, _} = rpc:call(Node, logplex_shard_info, read, [logplex_read_pool_map]),
            LogplexShards = rpc:call(Node, logplex_shard, prepare_shard_urls, [LogplexShardUrls]),
            good = rpc:call(Node, logplex_shard, prepare_url_update, [LogplexShards]),
            good = rpc:call(Node, logplex_shard, attempt_to_commit_url_update, []),
            shard_info_updated = rpc:call(Node, logplex_shard, make_update_permanent, []),
            {NewShards, _, _} = rpc:call(Node, logplex_shard_info, read, [logplex_read_pool_map]),
            io:format("Replaced shards:~n~p~nwith new shards:~n ~p~n", [dict:to_list(OldShards),
                                                                        dict:to_list(NewShards)])
    end.


connect(RemoteNode, Cookie) ->
    MyName = caller_name(),
    net_kernel:start([MyName, longnames]),
    erlang:set_cookie(MyName, Cookie),
    try_connect(RemoteNode, 5).

try_connect(_RemoteNode, 0) ->
    {error, gave_up};
try_connect(RemoteNode, RetriesLeft) ->
    case net_adm:ping(RemoteNode) of
        pong ->
            {connected, RemoteNode};
        Error ->
            io:format("Could not connect, retrying in 1 second, Reason ~p~n", [Error]),
            timer:sleep(timer:seconds(1)),
            try_connect(RemoteNode, RetriesLeft - 1)
    end.

cookie(CookieString) ->
    list_to_atom(CookieString).

logplex_node() ->
    NodeName = 
        case os:getenv("LOGPLEX_NODE_NAME") of
            false ->
                string:join(["logplex", net_adm:localhost()], "@");
            NodeName1 ->
                NodeNmae1
        end,
    list_to_atom(NodeName).

caller_name() ->
    Me = filename:basename(escript:script_name()),
    list_to_atom(Me ++ "_"
                 ++ os:getpid()
                 ++ "@" ++ net_adm:localhost()).

get_from_keys(Key) ->
    Filename = filename:join([os:getenv("HOME"), "keys.sh"]),
    case file:read_file(Filename) of
        {error, Error} ->
            io:format("Cannot open file ~s, error ~s (more info: http://www.erlang.org/doc/man/file.html#read_file-1)~n", [Filename, Error]),
            halt(1);
        {ok, Keys} ->
            case re:run(Keys, io_lib:format("~s='(.*)'", [Key]),
                        [{capture, all_but_first, list}]) of
                {match, [Val]} ->
                    Val;
                nomatch ->
                    io:format("No such key ~s in file ~s~n", [Key, Filename]),
                    halt(1)
            end
    end.

getenv(Key) ->
    case os:getenv(Key) of
        false ->
            io:format("Env variable ~s not set~n", [Key]),
            halt(1);
        Val ->
            Val
    end.
